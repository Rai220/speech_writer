import time
from typing import Annotated, List, Literal, TypedDict

from langchain.prompts import ChatPromptTemplate
from langchain.schema.output_parser import StrOutputParser
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_chroma import Chroma
from langchain_core.messages import HumanMessage
from langchain_core.output_parsers import JsonOutputParser
from langchain_gigachat.chat_models.gigachat import GigaChat
from langchain_gigachat.embeddings import GigaChatEmbeddings
from langgraph.graph import END, START, MessagesState, StateGraph
from langgraph.types import Command, interrupt
import requests

# LLM GigaChat
giga_low_topp = GigaChat(
    model="GigaChat-Max",
    verify_ssl_certs=False,
    profanity_check=False,
    base_url="https://gigachat.sberdevices.ru/v1",
    top_p=0,
    streaming=True,
    max_tokens=8000,
    timeout=600,
)

# –≠–º–±–µ–¥–¥–µ—Ä GigaChat
giga_embed = GigaChatEmbeddings(
    scope="GIGACHAT_API_PERS",
    verify_ssl_certs=False,
    model="EmbeddingsGigaR",
    base_url="https://gigachat.sberdevices.ru/v1",
)

files = [
    "ukaz_309.md",
    "burnaev.md",
    "president_direct_line_2024.md",
    "president_aij_2024.md",
]
all_content = {}

for file_path in files:
    url = f'https://raw.githubusercontent.com/Rai220/speech_writer/refs/heads/main/dataset/{file_path}'

    response = requests.get(url, stream=True)
    if response.status_code == 200:
        with open(file_path, 'wb') as file:
            for chunk in response.iter_content(chunk_size=8192):
                file.write(chunk)
    else:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª. –°—Ç–∞—Ç—É—Å –∫–æ–¥: {response.status_code}")    
    
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏ —á–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
    with open(file_path, "r", encoding="utf-8") as file:
        content = file.read()

    print(f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ {file_path} - {len(content)} –±–∞–π—Ç")
    all_content[file_path] = content

    docs = {
        "president_direct_line_2024.md": "–ü—Ä—è–º–∞—è –ª–∏–Ω–∏—è –ü—É—Ç–∏–Ω–∞ 2024",
        "president_aij_2024.md": "–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è AI Journey 2024",
    }

for doc in docs:
    splitter = RecursiveCharacterTextSplitter(
        chunk_size=1200, chunk_overlap=350, length_function=len, keep_separator=True
    )
    chunks = splitter.split_text(all_content[doc])
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞–Ω–∫–æ–≤: {len(chunks)}")

    metadatas = [{"document": docs[doc]} for _ in range(len(chunks))]
    vectorstore = Chroma.from_texts(chunks, embedding=giga_embed, metadatas=metadatas)
    
print("–í–µ–∫—Ç–æ—Ä–Ω–∞—è –ë–î –∑–∞–ø–æ–ª–Ω–µ–Ω–∞")

class SpeechWriterState(MessagesState):
    speech_topic: str
    time_to_speak: str
    speech_plan: str
    speaker_bio: str
    result_speech: str
    critique: list[str]
    retriever_citations: str

def plan_speech(state: SpeechWriterState):
    TEMPLATE = """
–¢—ã - –∞–≥–µ–Ω—Ç-–∞–Ω–∞–ª–∏—Ç–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –ø–æ–º–æ—â—å—é –≤ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–ª–∏—á–Ω—ã—Ö —Ä–µ—á–µ–π –¥–ª—è –ø–æ–ª–∏—Ç–∏–∫–æ–≤.
–¢—ã –¥–æ–ª–∂–µ–Ω –ø–æ–º–æ—á—å —Å–ø–∏—á—Ä–∞–π—Ç–µ—Ä—É –Ω–∞–ø–∏—Å–∞—Ç—å —Ö–æ—Ä–æ—à—É—é —Ä–µ—á—å, –ø–æ—ç—Ç–æ–º—É —Ç—ã –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ —Ä–µ—á–∏
–¢–µ–º–∞ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è - {speech_topic}. –í—Ä–µ–º—è –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è - {time_to_speak}.

–í–æ—Ç –±–∏–æ–≥—Ä–∞—Ñ–∏—è —Å–ø–∏–∫–µ—Ä–∞ –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ä–µ—á—å:
<BIO>
{speaker_bio}
</BIO>

–í–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ä–µ—á—å:
<MAIN_DOCUMENT>
{content}
</MAIN_DOCUMENT>

–í–æ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —É—á–µ—Å—Ç—å –ø—Ä–∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ—á–∏:
<ADDITIONAL_DOCUMENTS>
{additional_content}
</ADDITIONAL_DOCUMENTS>

–¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:

**–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞:**
```JSON
{{
  "speech_structure": "<—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ—á–∏ –ø–æ —Ç–µ–º–∞—Ç–∏–∫–∞–º, —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∑–∞—è–≤–ª–µ–Ω–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è>",
  "tezis_structure: "<—Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–µ–∑–∏—Å–æ–≤ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.>",
  "speech_tz: "<—Ç–∑ –Ω–∞ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ —Ä–µ—á–∏>",
  "actual_citations: "<–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã –∏–∑ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ —Ç–µ–º–µ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è>"
}}```
    """
    print(f"üìù Speech planner –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–±–æ—Ç—É")
    chat_template = ChatPromptTemplate.from_messages(
        [
            ("system", TEMPLATE),
        ]
    )

    pipe = chat_template | giga_low_topp | StrOutputParser()

    resp = pipe.invoke(
        {
            "speech_topic": state["speech_topic"],
            "time_to_speak": state["time_to_speak"],
            "content": all_content["ukaz_309.md"],
            "additional_content": all_content["burnaev.md"],
            "speaker_bio": state["speaker_bio"],
        }
    )

    # printmd(f"–°–æ—Å—Ç–∞–≤–ª–µ–Ω –ø–ª–∞–Ω –¥–æ–∫—É–º–µ–Ω—Ç–∞:\n{resp}")

    return {"speech_plan": resp}


def write_speech(state: SpeechWriterState):
    TEMPLATE = """
–¢—ã - –∞–≥–µ–Ω—Ç-—Å–ø–∏—á—Ä–∞–π—Ç–µ—Ä. –¢—ã –¥–æ–ª–∂–µ–Ω –Ω–∞–ø–∏—Å–∞—Ç—å —Ä–µ—á—å –¥–ª—è –ø–æ–ª–∏—Ç–∏–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–±–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.
–¢–µ–º–∞ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è - {speech_topic}. –í—Ä–µ–º—è –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è - {time_to_speak}.

–í–æ—Ç –±–∏–æ–≥—Ä–∞—Ñ–∏—è —Å–ø–∏–∫–µ—Ä–∞ –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ä–µ—á—å:
<BIO>
{speaker_bio}
</BIO>

–í–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ä–µ—á—å:
<MAIN_DOCUMENT>
{content}
</MAIN_DOCUMENT>

–í–æ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —É—á–µ—Å—Ç—å –ø—Ä–∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ—á–∏:
<ADDITIONAL_DOCUMENTS>
{additional_content}
</ADDITIONAL_DOCUMENTS>

–ü–ª–∞–Ω –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ—Ç —Ç–≤–æ–µ–≥–æ –∫–æ–ª–ª–µ–≥–∏-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞:
<SPEECH_PLAN>
{speech_plan}
</SPEECH_PLAN>

–í–æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∞—è –≤–µ—Ä—Å–∏—è —Ä–µ—á–∏, –∫–æ—Ç–æ—Ä—É—é —Ç—ã –Ω–∞–ø–∏—Å–∞–ª –Ω–∞ –ø—Ä–æ—à–ª–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å):
<SPEECH_TEXT>
{result_speech}
<SPEECH_TEXT>

–í–æ—Ç –Ω–∞–±–æ—Ä –æ—Ç—Ä—ã–≤–∫–æ–≤ –∏–∑ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π –ü—É—Ç–∏–Ω–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ—á–∏:
<PUTIN_SPEECH>
{retriever_citations}
</PUTIN_SPEECH>
–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—Ü–∏—Ç–∏—Ä—É–π –í. –í. –ü—É—Ç–∏–Ω–∞ –≤ —Å–≤–æ–µ–π —Ä–µ—á–∏ (–µ—Å–ª–∏ –æ—Ç—Ä—ã–≤–∫–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã). –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏ —è–≤–Ω–æ, —á—Ç–æ —ç—Ç–æ —Ü–∏—Ç–∞—Ç–∞ –í. –í. –ü—É—Ç–∏–Ω–∞!!!

–í–æ—Ç –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–∞—è –∫—Ä–∏—Ç–∏–∫–∞ —Ç–≤–æ–µ–π –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏ —Ä–µ—á–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å):
<CRITIQUE>
{critique}
</CRITIQUE>

–ò—Ç–æ–≥–æ–≤–∞—è —Ä–µ—á—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫—Ä–∞—Å–∏–≤–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—Ç—å —Å–æ–±–æ–π –Ω–∞–±–æ—Ä –ø—É–Ω–∫—Ç–æ–≤.
–ï—Å–ª–∏ —ç—Ç–æ —Ä–µ—á—å –¥–ª—è –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è - –¥–µ—Ä–∂–∏ –∏–Ω—Ç—Ä–∏–≥—É, –Ω–µ –Ω–∞–∑—ã–≤–∞–π –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —Å—Ä–∞–∑—É.
–£–∫–∞–∂–∏ –≤—Ä–µ–º—è —á—Ç–µ–Ω–∏—è –≤ —Å–∫–æ–±–∫–∞—Ö –ø–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º.
"""

    chat_template = ChatPromptTemplate.from_messages(
        [
            ("system", TEMPLATE),
        ]
    )

    pipe = chat_template | giga_low_topp | StrOutputParser()

    critique = state.get("critique", [""])[-1]
    citations = f'{state.get("retriever_citations", "")}'
    print(f"üë®‚Äçüíª Writer –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–±–æ—Ç—É. –û–±—ä–µ–º —Ü–∏—Ç–∞—Ç: {len(citations)}")

    resp = pipe.invoke(
        {
            "speech_topic": state["speech_topic"],
            "time_to_speak": state["time_to_speak"],
            "content": all_content["ukaz_309.md"],
            "additional_content": all_content["burnaev.md"],
            "speech_plan": state["speech_plan"],
            "speaker_bio": state["speaker_bio"],
            "result_speech": state.get("result_speech", ""),
            "critique": critique,
            "retriever_citations": citations,
        }
    )

    return {"result_speech": resp}


def critique(
    state: SpeechWriterState,
) -> Command[Literal["üë®‚Äçüíª Writer", "üåê Retriever", END]]:
    TEMPLATE = """
–¢—ã - –∞–≥–µ–Ω—Ç-–≤—ã–ø—É—Å–∫–∞—é—â–∏–π —Ä–µ–¥–∞–∫—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –ø–æ–º–æ—â—å—é –≤ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–ª–∏—á–Ω—ã—Ö —Ä–µ—á–µ–π –¥–ª—è –ø–æ–ª–∏—Ç–∏–∫–æ–≤. –¢—ã –¥–æ–ª–∂–µ–Ω –æ—Ü–µ–Ω–∏—Ç—å —Ä–µ—á—å –∏ —Ä–µ—à–∏—Ç—å - –≥–æ—Ç–æ–≤–∞ –ª–∏ –æ–Ω–∞ –∏–ª–∏ –µ—ë –Ω—É–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å.
–¢—ã –¥–æ–ª–∂–µ–Ω –ø–æ–º–æ—á—å —Å–ø–∏—á—Ä–∞–π—Ç–µ—Ä—É –Ω–∞–ø–∏—Å–∞—Ç—å —Ö–æ—Ä–æ—à—É—é —Ä–µ—á—å, —Ç–≤–æ—è –∑–∞–¥–∞—á–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–Ω—É—é —Ä–µ—á—å –∏ –¥–∞—Ç—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤–∑—è—å, –µ—Å–ª–∏ –æ–Ω–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è.

–¢—ã –¥–æ–ª–∂–µ–Ω –¥–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–∏—Ç–∏–∫–∏. –í –∫–∞–∫–æ–π-—Ç–æ –º–æ–º–µ–Ω—Ç –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏–µ —Ä–µ—á–∏.
–¢–µ–º–∞ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è - {speech_topic}. –í—Ä–µ–º—è –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è - {time_to_speak}.

–í–æ—Ç –±–∏–æ–≥—Ä–∞—Ñ–∏—è —Å–ø–∏–∫–µ—Ä–∞ –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ä–µ—á—å:
<BIO>
{speaker_bio}
</BIO>

–í–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ä–µ—á—å:
<MAIN_DOCUMENT>
{content}
</MAIN_DOCUMENT>

–í–æ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —É—á–µ—Å—Ç—å –ø—Ä–∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ—á–∏:
<ADDITIONAL_DOCUMENTS>
{additional_content}
</ADDITIONAL_DOCUMENTS>

–í–æ—Ç —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç —Ä–µ—á–∏, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ –Ω–∞–¥–æ –æ—Ü–µ–Ω–∏—Ç—å:
<SPEECH_TEXT>
{result_speech}
<SPEECH_TEXT>

–í–æ—Ç –∫—Ä–∏—Ç–∏–∫–∞, –∫–æ—Ç–æ—Ä—É—é —Ç—ã –¥–∞–≤–∞–ª —Ä–∞–Ω–µ–µ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤–µ—Ä—Å–∏–∏ —Ä–µ—á–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å). –ù–µ –ø–æ–≤—Ç–æ—Ä—è–π—Å—è, –Ω–µ –ø–∏—à–∏ —Ç—É –∂–µ —Å–∞–º—É—é –∫—Ä–∏—Ç–∏–∫—É –∑–∞–Ω–æ–≤–æ.
<OLD_CRITIQUE>
{old_critique}
</OLD_CRITIQUE>
–ï—Å–ª–∏ —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –¥–∞—Ç—å –Ω–∏–∫–∞–∫–æ–π –ø—Ä–∏–Ω—Ü–∏–ø–∏–∞–ª—å–Ω–æ –Ω–æ–≤–æ–π –∫—Ä–∏—Ç–∏–∫–∏ - –ø—Ä–∏–º–∏ —Ä–µ—à–µ–Ω–∏–µ good.
–¢–µ–∫—Å—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ü–∏—Ç–∞—Ç—ã –ü—É—Ç–∏–Ω–∞. –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–∞–∫, —Ç–æ –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–∏–º–∏ —Ä–µ—à–µ–Ω–∏–µ final_decision = retrieve

–¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:

**–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞:**
```JSON
{{
  "thoughts": <—Ç–≤–æ–∏ –º—ã—Å–ª–∏ –ø–æ –ø–æ–≤–æ–¥—É –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–π —Ä–µ—á–∏>,
  "critique": <–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–∞—è –∫—Ä–∏—Ç–∏–∫–∞ —Ä–µ—á–∏ - —á—Ç–æ –Ω—É–∂–Ω–æ –ø–æ–ø—Ä–∞–≤–∏—Ç—å –∏–ª–∏ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å>,
  "is_new_critique": <–µ—Å—Ç—å –ª–∏ –≤ —Ç–≤–æ–µ–π –∫—Ä–∏—Ç–∏–∫–∏ —á—Ç–æ-—Ç–æ –ø—Ä–∏–Ω—Ü–∏–ø–∏–∞–ª—å–Ω–æ –Ω–æ–≤–æ–µ, –µ—Å–ª–∏ —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å —Å–æ —Å—Ç–∞—Ä–æ–π –∫—Ä–∏—Ç–∏–∫–æ–π (–µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞) - True –∏–ª–∏ False>,
  "final_decision: <–∏—Ç–æ–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–¥–Ω–æ –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö: - good (–µ—Å–ª–∏ –Ω–µ—Ç –Ω–æ–≤–æ–π –∫—Ä–∏—Ç–∏–∫–∏ –∏ —Ä–µ—á—å –∑–∞–∫–æ–Ω—á–µ–Ω–∞), fix (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å —Ä–µ—á—å), retrieve (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–∏—Å–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ü–∏—Ç–∞—Ç)>
}}```
    """

    chat_template = ChatPromptTemplate.from_messages(
        [
            ("system", TEMPLATE),
        ]
    )

    pipe = chat_template | giga_low_topp | JsonOutputParser()

    print(f"üßë‚Äç‚öñÔ∏è Critic –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–±–æ—Ç—É")

    resp = pipe.invoke(
        {
            "speech_topic": state["speech_topic"],
            "time_to_speak": state["time_to_speak"],
            "content": all_content["ukaz_309.md"],
            "additional_content": all_content["burnaev.md"],
            "speaker_bio": state["speaker_bio"],
            "result_speech": state.get("result_speech", ""),
            "old_critique": state.get("critique", []),
        }
    )

    final_decision = resp.get("final_decision", "good")
    critique = resp.get("critique", "")
    is_new_critique = resp.get("is_new_critique", "False")
    # printmd(f"–°–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –∫—Ä–∏—Ç–∏–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞:\n{resp}")
    print(
        f"–ö—Ä–∏—Ç–∏–∫ –ø—Ä–∏–Ω—è–ª —Ä–µ—à–µ–Ω–∏–µ: {final_decision}, is_new_critique: {is_new_critique}"
    )

    old_critique = state.get("critique", [])
    old_critique.append(critique)
    update = {"critique": old_critique}

    goto = END
    if final_decision == "fix" and is_new_critique:
        goto = "üë®‚Äçüíª Writer"
    if final_decision == "retrieve":
        goto = "üåê Retriever"

    return Command(update=update, goto=goto)


def retriever(state: SpeechWriterState):
    print(f"üåê Retriever –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–±–æ—Ç—É")
    result = graph.get_state(config=config).values["result_speech"]
    docs = vectorstore.similarity_search(result[0:2048], k=4)  # Depends on embeddings
    return {"retriever_citations": f"{docs}"}


from langgraph.checkpoint.memory import MemorySaver
from langgraph.graph import END, START, MessagesState, StateGraph

builder = StateGraph(SpeechWriterState)
builder.add_node("üìù Speech planner", plan_speech)
builder.add_node("üë®‚Äçüíª Writer", write_speech)
builder.add_node("üßë‚Äç‚öñÔ∏è Critic", critique)
builder.add_node("üåê Retriever", retriever)

builder.add_edge(START, "üìù Speech planner")
builder.add_edge("üìù Speech planner", "üë®‚Äçüíª Writer")
builder.add_edge("üë®‚Äçüíª Writer", "üßë‚Äç‚öñÔ∏è Critic")
builder.add_edge("üåê Retriever", "üë®‚Äçüíª Writer")

memory = MemorySaver()
graph = builder.compile(checkpointer=memory)


# Comment me to debug!
# speaker_bio = """–î–º–∏—Ç—Ä–∏–π –ù–∏–∫–æ–ª–∞–µ–≤–∏—á –ß–µ—Ä–Ω—ã—à–µ–Ω–∫–æ (—Ä–æ–¥. 20 —Å–µ–Ω—Ç—è–±—Ä—è 1968 –≥–æ–¥–∞ –≤ –°–∞—Ä–∞—Ç–æ–≤–µ) ‚Äî —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –¥–µ—è—Ç–µ–ª—å –∏ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å. –í 1993 –≥–æ–¥—É —Å—Ç–∞–ª —Å–æ—É—á—Ä–µ–¥–∏—Ç–µ–ª–µ–º –æ–¥–Ω–æ–≥–æ –∏–∑ –∫—Ä—É–ø–Ω–µ–π—à–∏—Ö –≤ –†–æ—Å—Å–∏–∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ö–æ–ª–¥–∏–Ω–≥–æ–≤ Media Arts, –∫–æ—Ç–æ—Ä—ã–º —É–ø—Ä–∞–≤–ª—è–ª –≤ —Ç–µ—á–µ–Ω–∏–µ 12 –ª–µ—Ç.
# –° 2007 –ø–æ 2014 –≥–æ–¥ –∑–∞–Ω–∏–º–∞–ª –¥–æ–ª–∂–Ω–æ—Å—Ç—å –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∫–æ–º–∏—Ç–µ—Ç–∞ XXII –û–ª–∏–º–ø–∏–π—Å–∫–∏—Ö –∑–∏–º–Ω–∏—Ö –∏–≥—Ä –∏ XI –ü–∞—Ä–∞–ª–∏–º–ø–∏–π—Å–∫–∏—Ö –∑–∏–º–Ω–∏—Ö –∏–≥—Ä 2014 –≥–æ–¥–∞ –≤ –°–æ—á–∏, —Å—ã–≥—Ä–∞–≤ –∫–ª—é—á–µ–≤—É—é —Ä–æ–ª—å –≤ –∏—Ö –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏.
# –í 2015 –≥–æ–¥—É –≤–æ–∑–≥–ª–∞–≤–∏–ª –ê–û ¬´–ì–∞–∑–ø—Ä–æ–º-–ú–µ–¥–∏–∞ –•–æ–ª–¥–∏–Ω–≥¬ª, –≥–¥–µ –∑–∞–Ω–∏–º–∞–ª –ø–æ—Å—Ç –≥–µ–Ω–µ—Ä–∞–ª—å–Ω–æ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –∏ –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—è –ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ 2020 –≥–æ–¥–∞.
# –° 21 —è–Ω–≤–∞—Ä—è 2020 –≥–æ–¥–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª–µ–º –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—è –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏, –∫—É—Ä–∏—Ä—É—è –≤–æ–ø—Ä–æ—Å—ã —Ü–∏—Ñ—Ä–æ–≤–æ–π —ç–∫–æ–Ω–æ–º–∏–∫–∏, –∏–Ω–Ω–æ–≤–∞—Ü–∏–π, —Å–≤—è–∑–∏, –°–ú–ò, –∞ —Ç–∞–∫–∂–µ –∫—É–ª—å—Ç—É—Ä—ã, —Ç—É—Ä–∏–∑–º–∞ –∏ —Å–ø–æ—Ä—Ç–∞.
# –ß–µ—Ä–Ω—ã—à–µ–Ω–∫–æ –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω –æ—Ä–¥–µ–Ω–æ–º ¬´–ó–∞ –∑–∞—Å–ª—É–≥–∏ –ø–µ—Ä–µ–¥ –û—Ç–µ—á–µ—Å—Ç–≤–æ–º¬ª II —Å—Ç–µ–ø–µ–Ω–∏, –æ—Ä–¥–µ–Ω–æ–º –î—Ä—É–∂–±—ã –∏ –æ—Ä–¥–µ–Ω–æ–º –ü–æ—á–µ—Ç–∞.
# –û–Ω —É–≤–ª–µ–∫–∞–µ—Ç—Å—è –≥–æ—Ä–Ω—ã–º–∏ –ª—ã–∂–∞–º–∏ –∏ –±–æ–µ–≤—ã–º–∏ –∏—Å–∫—É—Å—Å—Ç–≤–∞–º–∏."""

# inputs = {
#     "speech_topic": "–ù–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –ï–≤–≥–µ–Ω–∏—è –ë—É—Ä–Ω–∞–µ–≤–∞ –Ω–∞ –ù–∞—É—á–Ω–æ–π –ø—Ä–µ–º–∏–∏ –°–±–µ—Ä–∞ (–Ω–æ–º–∏–Ω–∞—Ü–∏—è ¬´–¶–∏—Ñ—Ä–æ–≤–∞—è –í—Å–µ–ª–µ–Ω–Ω–∞—è¬ª)",
#     "time_to_speak": "5 –º–∏–Ω—É—Ç",
#     "speaker_bio": speaker_bio,
# }

# config = {"configurable": {"thread_id": "1"}}
# start = time.time()
# for output in graph.stream(inputs, config=config, stream_mode="updates"):
#     current_agent = next(iter(output))
#     print(f"–û—Ç—Ä–∞–±–æ—Ç–∞–ª –∞–≥–µ–Ω—Ç {current_agent}. –í—Ä–µ–º—è: {int(time.time() - start)}—Å")
